{"version":3,"sources":["constants.js","AppSider.js","utils.js","CustomGrid.js","LocationMap.js","EmptyData.js","AppContent.js","notification.js","FormUpdateInfo.js","ImportPanel.js","App.js","index.js"],"names":["AppMode","ContentType","CategoryType","Sider","Layout","AppSider","mode","setMode","useState","selectedKeys","setSelectedKeys","useEffect","className","theme","onSelect","item","key","Item","normalizeTextInput","txt","trim","getFileExtension","filename","exec","undefined","getFileName","filePath","substring","lastIndexOf","toLocalPath","file","getContentType","getCategoryType","isFileType","isCatetoryType","isSearchType","numOfColumns","width","DocumentItem","extension","other","ext","toLowerCase","FilePdfOutlined","style","fontSize","color","FileWordOutlined","FileExcelOutlined","FilePptOutlined","FileOutlined","CalenderInfo","text","title","CalendarOutlined","DeviceInfo","CameraOutlined","LocationInfo","EnvironmentOutlined","ImportFileGrid","files","contentType","onFileSelected","selectedIndex","setSelectedIndex","handleOnClicked","id","height","columnCount","rowCount","Math","ceil","length","expectedWidth","expectedHeight","rowHeight","columnWidth","cellRenderer","columnIndex","rowIndex","onClick","src","alt","MainFileGrid","path","type","fluid","a","window","electron","ipcRenderer","invoke","console","log","year","month","device","country","region","CategoryGrid","categories","categoryType","onCategorySelected","previewType","previewPath","data","LocationMap","mapRef","useRef","current","newCenter","lat","lon","setView","getZoom","MapContainer","center","zoom","whenCreated","mapInstance","TileLayer","attribution","url","map","category","index","Marker","position","icon","Icon","iconUrl","iconSize","eventHandlers","click","EmptyData","display","justifyContent","alignItems","Header","Search","Input","GET_LIMIT","AppContent","onImport","setFiles","setCategories","inputTextSearch","setInputTextSearch","searchValue","setSearchValue","hasMore","setHasMore","handleOnSearch","useCallback","offset","opt","limit","JSON","stringify","result","onSearch","value","handleOnCategorySelected","findFilesByType","findCategoriesByType","handleLoadMore","Fragment","placeholder","allowClear","onChange","event","target","shape","opacity","ArrowLeftOutlined","UploadOutlined","margin","disabled","openNotificationWithIcon","description","notification","message","openNotificationError","osmProvider","OpenStreetMapProvider","FormUpdateInfo","onSuccess","Form","useForm","form","setCountry","setRegion","setFieldsValue","datetime","moment","timestamp","onFinish","fieldsValue","values","Date","getTime","timeCreated","address","search","query","results","x","y","layout","onFinishFailed","errorInfo","name","label","showTime","format","htmlType","_id","ImportPanel","onBack","setContentType","selectedFile","setSelectedFile","onImportClicked","canceled","filePaths","onFileImportedSuccess","currentPaths","newPaths","filter","subTitle","plain","Group","buttonStyle","e","Button","FolderOpenOutlined","span","App","importing","setImporting","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fd10f8c.chunk.js","sourcesContent":["// define app's mode, coresponding with each menu item in AppSider\r\nexport const AppMode = {\r\n  MODE_PHOTO: \"photo\",\r\n  MODE_VIDEO: \"video\",\r\n  MODE_DOCUMENT: \"document\",\r\n  MODE_CALENDAR: \"calendar\",\r\n  MODE_DEVICE: \"device\",\r\n  MODE_LOCATION: \"location\",\r\n  MODE_MAP: \"map\",\r\n  MODE_SEARCH: \"search\",\r\n};\r\n\r\n// define content's type\r\nexport const ContentType = {\r\n  TYPE_PHOTO: \"photo\",\r\n  TYPE_VIDEO: \"video\",\r\n  TYPE_DOCUMENT: \"document\",\r\n};\r\n\r\n// define category's type\r\nexport const CategoryType = {\r\n  TYPE_CALENDAR: \"calendar\",\r\n  TYPE_DEVICE: \"device\",\r\n  TYPE_LOCATION: \"location\",\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { AppMode } from \"./constants\";\r\n\r\nconst { Sider } = Layout;\r\n\r\nconst AppSider = ({ mode, setMode }) => {\r\n  const [selectedKeys, setSelectedKeys] = useState([mode]);\r\n\r\n  const onMenuItemSelected = (item) => {\r\n    setMode(item.key);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedKeys([mode]);\r\n  }, [mode]);\r\n\r\n  return (\r\n    <Sider className=\"app-sider\">\r\n      <div className=\"app-logo\">\r\n        <span>Multi Management</span>\r\n      </div>\r\n      <Menu\r\n        theme=\"dark\"\r\n        mode=\"inline\"\r\n        onSelect={onMenuItemSelected}\r\n        selectedKeys={selectedKeys}\r\n      >\r\n        <Menu.Item key={AppMode.MODE_PHOTO}>Photo</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_VIDEO}>Video</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_DOCUMENT}>Document</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_CALENDAR}>Calendar</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_DEVICE}>Device</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_LOCATION}>Location</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_MAP}>Map</Menu.Item>\r\n        <Menu.Item key={AppMode.MODE_SEARCH}>Search</Menu.Item>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nexport default AppSider;\r\n","import { ContentType, CategoryType, AppMode } from \"./constants\";\r\n\r\nexport const normalizeTextInput = (txt) => {\r\n  return txt ? txt.trim() : \"\";\r\n};\r\n\r\nexport const getFileExtension = (filename) => {\r\n  return /[.]/.exec(filename) ? /[^.]+$/.exec(filename)[0] : undefined;\r\n};\r\n\r\nexport const getFileName = (filePath) => {\r\n  return filePath ? filePath.substring(filePath.lastIndexOf(\"\\\\\") + 1) : \"\";\r\n};\r\n\r\nexport const toLocalPath = (file) => {\r\n  return \"file://\" + file;\r\n};\r\n\r\nexport const getContentType = (mode) => {\r\n  if (mode === AppMode.MODE_VIDEO) return ContentType.TYPE_VIDEO;\r\n  if (mode === AppMode.MODE_DOCUMENT) return ContentType.TYPE_DOCUMENT;\r\n  if (mode === AppMode.MODE_PHOTO) return ContentType.TYPE_PHOTO;\r\n  return \"unknown\";\r\n};\r\n\r\nexport const getCategoryType = (mode) => {\r\n  if (mode === AppMode.MODE_CALENDAR) return CategoryType.TYPE_CALENDAR;\r\n  if (mode === AppMode.MODE_DEVICE) return CategoryType.TYPE_DEVICE;\r\n  if (mode === AppMode.MODE_LOCATION) return CategoryType.TYPE_LOCATION;\r\n  if (mode === AppMode.MODE_MAP) return CategoryType.TYPE_LOCATION; // treating Map as location category\r\n  return \"unknown\";\r\n};\r\n\r\nexport const isFileType = (mode) => {\r\n  return (\r\n    mode === AppMode.MODE_VIDEO ||\r\n    mode === AppMode.MODE_DOCUMENT ||\r\n    mode === AppMode.MODE_PHOTO\r\n  );\r\n};\r\n\r\nexport const isCatetoryType = (mode) => {\r\n  return (\r\n    mode === AppMode.MODE_CALENDAR ||\r\n    mode === AppMode.MODE_DEVICE ||\r\n    mode === AppMode.MODE_LOCATION ||\r\n    mode === AppMode.MODE_MAP\r\n  );\r\n};\r\n\r\nexport const isSearchType = (mode) => {\r\n  return mode === AppMode.MODE_SEARCH;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Image, Tag } from \"antd\";\r\nimport {\r\n  CameraOutlined,\r\n  CalendarOutlined,\r\n  EnvironmentOutlined,\r\n  FileOutlined,\r\n  FilePdfOutlined,\r\n  FileWordOutlined,\r\n  FileExcelOutlined,\r\n  FilePptOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Grid, AutoSizer } from \"react-virtualized\";\r\nimport { CategoryType, ContentType } from \"./constants\";\r\nimport { Player } from \"video-react\";\r\nimport { getFileExtension, getFileName, toLocalPath } from \"./utils\";\r\nimport \"video-react/dist/video-react.css\";\r\nimport \"./CustomGrid.css\";\r\n\r\n// Define the number of columns by width\r\nconst numOfColumns = (width) => {\r\n  if (width < 1200) return 3;\r\n  if (width < 1600) return 4;\r\n  return 5;\r\n};\r\n\r\n// Custom document's icon by its extension\r\nconst DocumentItem = ({ extension, ...other }) => {\r\n  const ext = extension.toLowerCase();\r\n\r\n  if (ext === \"pdf\") {\r\n    return (\r\n      <FilePdfOutlined\r\n        style={{\r\n          fontSize: \"96px\",\r\n          color: \"#e98900\",\r\n        }}\r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  if (ext === \"doc\" || ext === \"docx\" || ext === \"rtf\") {\r\n    return (\r\n      <FileWordOutlined\r\n        style={{\r\n          fontSize: \"96px\",\r\n          color: \"#188bec\",\r\n        }}\r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  if (ext === \"xls\" || ext === \"xlsx\") {\r\n    return (\r\n      <FileExcelOutlined\r\n        style={{\r\n          fontSize: \"96px\",\r\n          color: \"#31b27d\",\r\n        }}\r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  if (ext === \"ppt\" || ext === \"pptx\") {\r\n    return (\r\n      <FilePptOutlined\r\n        style={{\r\n          fontSize: \"96px\",\r\n          color: \"#f76b68\",\r\n        }}\r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <FileOutlined\r\n      style={{\r\n        fontSize: \"96px\",\r\n        color: \"#888\",\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n};\r\n\r\n// Calender Info represents time when file's is taken on\r\nconst CalenderInfo = ({ text }) => {\r\n  return (\r\n    <div className=\"row-prop\" title={text}>\r\n      <CalendarOutlined />\r\n      <div className=\"desc\">{text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Device Info represents device which file's is taken by\r\nconst DeviceInfo = ({ text }) => {\r\n  const txt = !text || text === \"Unknown\" ? \"Device unknown\" : text;\r\n  return (\r\n    <div className=\"row-prop\" title={txt}>\r\n      <CameraOutlined />\r\n      <div className=\"desc\">{txt}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Device Info represents location where file's is taken in\r\nconst LocationInfo = ({ text }) => {\r\n  const txt = !text || text === \"Unknown / Unknown\" ? \"Location unknown\" : text;\r\n  return (\r\n    <div className=\"row-prop\" title={txt}>\r\n      <EnvironmentOutlined />\r\n      <div className=\"desc\">{txt}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// ImportFileGrid using in ImportPanel Component\r\n// For importing multimedia files\r\nconst ImportFileGrid = ({ files, contentType, onFileSelected }) => {\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n  // set selected index to highlight corresponding item\r\n  const handleOnClicked = (id) => () => {\r\n    setSelectedIndex(id);\r\n  };\r\n\r\n  // reset selected index to 0 if the contentType is changed\r\n  useEffect(() => {\r\n    setSelectedIndex(0);\r\n  }, [contentType]);\r\n\r\n  // when selected index change -> bring the file to outer\r\n  useEffect(() => {\r\n    if (onFileSelected) {\r\n      onFileSelected(files[selectedIndex]);\r\n    }\r\n  }, [selectedIndex, onFileSelected, files]);\r\n\r\n  return (\r\n    <div className=\"customgrid-container\">\r\n      <AutoSizer>\r\n        {({ height, width }) => {\r\n          const columnCount = numOfColumns(width);\r\n          const rowCount = Math.ceil(files.length / columnCount);\r\n          const expectedWidth = width / columnCount - 8;\r\n          const expectedHeight = (3 * expectedWidth) / 4;\r\n          return (\r\n            <Grid\r\n              className=\"container-grid\"\r\n              height={height}\r\n              width={width}\r\n              rowHeight={expectedHeight + 45}\r\n              columnWidth={expectedWidth}\r\n              columnCount={columnCount}\r\n              rowCount={rowCount}\r\n              cellRenderer={({ columnIndex, key, rowIndex, style }) => {\r\n                const id = rowIndex * columnCount + columnIndex;\r\n                if (id >= files.length) return null;\r\n                else\r\n                  return (\r\n                    <div key={key} style={style} onClick={handleOnClicked(id)}>\r\n                      <div\r\n                        className=\"grid-cell\"\r\n                        style={{\r\n                          width: `${expectedWidth}px`,\r\n                          height: `${expectedHeight}px`,\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className={`cell-content-wrapper ${\r\n                            selectedIndex === id ? \"selected\" : \"\"\r\n                          }`}\r\n                          style={{\r\n                            width: `${expectedWidth - 10}px`,\r\n                            height: `${expectedHeight - 10}px`,\r\n                          }}\r\n                        >\r\n                          {contentType === ContentType.TYPE_PHOTO && (\r\n                            <img\r\n                              className=\"image\"\r\n                              width={expectedWidth - 14}\r\n                              height={expectedHeight - 14}\r\n                              src={toLocalPath(files[id])}\r\n                              alt={getFileName(files[id])}\r\n                            />\r\n                          )}\r\n                          {contentType === ContentType.TYPE_VIDEO && (\r\n                            <video\r\n                              className=\"video\"\r\n                              width={expectedWidth - 14}\r\n                              height={expectedHeight - 14}\r\n                              src={toLocalPath(files[id])}\r\n                            />\r\n                          )}\r\n                          {contentType === ContentType.TYPE_DOCUMENT && (\r\n                            <DocumentItem\r\n                              extension={getFileExtension(files[id])}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        <div\r\n                          className=\"cell-tag-wrapper\"\r\n                          style={{\r\n                            width: `${expectedWidth - 10}px`,\r\n                            height: \"45px\",\r\n                          }}\r\n                        >\r\n                          <Tag className=\"name\">{getFileName(files[id])}</Tag>\r\n                          <Tag color=\"blue\">{getFileExtension(files[id])}</Tag>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n              }}\r\n            />\r\n          );\r\n        }}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n};\r\n\r\n// MainFileGrid using in AppContent Component\r\n// For previewing multimedia files\r\nconst MainFileGrid = ({ files }) => {\r\n  const handleOpenDocument = (path) => async () => {\r\n    try {\r\n      await window.electron.ipcRenderer.invoke(\"open-external-file\", path);\r\n      console.log(\"result of open external file success\", path);\r\n    } catch (error) {\r\n      console.log(\"result of open external file error\", path, error);\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className=\"customgrid-container\">\r\n      <AutoSizer>\r\n        {({ height, width }) => {\r\n          const columnCount = numOfColumns(width);\r\n          const rowCount = Math.ceil(files.length / columnCount);\r\n          const expectedWidth = width / columnCount - 8;\r\n          const expectedHeight = (3 * expectedWidth) / 4;\r\n          return (\r\n            <Grid\r\n              className=\"container-grid\"\r\n              height={height}\r\n              width={width}\r\n              rowHeight={expectedHeight + 75}\r\n              columnWidth={expectedWidth}\r\n              columnCount={columnCount}\r\n              rowCount={rowCount}\r\n              cellRenderer={({ columnIndex, key, rowIndex, style }) => {\r\n                const id = rowIndex * columnCount + columnIndex;\r\n                if (id >= files.length) return null;\r\n                else\r\n                  return (\r\n                    <div key={key} style={style}>\r\n                      <div\r\n                        className=\"grid-cell\"\r\n                        style={{\r\n                          width: `${expectedWidth}px`,\r\n                          height: `${expectedHeight}px`,\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className=\"cell-content-wrapper\"\r\n                          style={{\r\n                            width: `${expectedWidth - 10}px`,\r\n                            height: `${expectedHeight - 10}px`,\r\n                          }}\r\n                        >\r\n                          {files[id].type === ContentType.TYPE_PHOTO && (\r\n                            <Image\r\n                              className=\"image\"\r\n                              src={toLocalPath(files[id].path)}\r\n                              width={expectedWidth - 14}\r\n                              height={expectedHeight - 14}\r\n                            />\r\n                          )}\r\n                          {files[id].type === ContentType.TYPE_VIDEO && (\r\n                            <Player\r\n                              fluid={false}\r\n                              width={expectedWidth - 14}\r\n                              height={expectedHeight - 14}\r\n                            >\r\n                              <source src={toLocalPath(files[id].path)} />\r\n                            </Player>\r\n                          )}\r\n                          {files[id].type === ContentType.TYPE_DOCUMENT && (\r\n                            <DocumentItem\r\n                              extension={getFileExtension(files[id].path)}\r\n                              onClick={handleOpenDocument(files[id].path)}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        <div\r\n                          className=\"main-file-info-wrapper\"\r\n                          style={{\r\n                            width: `${expectedWidth - 10}px`,\r\n                            height: \"75px\",\r\n                          }}\r\n                        >\r\n                          <CalenderInfo\r\n                            text={`${files[id].year} / ${files[id].month}`}\r\n                          />\r\n                          <DeviceInfo text={files[id].device || \"Unknown\"} />\r\n                          <LocationInfo\r\n                            text={`${files[id].country || \"Unknown\"} / ${\r\n                              files[id].region || \"Unknown\"\r\n                            }`}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n              }}\r\n            />\r\n          );\r\n        }}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n};\r\n\r\n// CategoryGrid using in AppContent Component\r\n// For previewing categories\r\nconst CategoryGrid = ({ categories, categoryType, onCategorySelected }) => {\r\n  const handleOnClicked = (id) => () => {\r\n    onCategorySelected(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"customgrid-container\">\r\n      <AutoSizer>\r\n        {({ height, width }) => {\r\n          const columnCount = numOfColumns(width);\r\n          const rowCount = Math.ceil(categories.length / columnCount);\r\n          const expectedWidth = width / columnCount - 8;\r\n          const expectedHeight = (3 * expectedWidth) / 4;\r\n          return (\r\n            <Grid\r\n              className=\"container-grid\"\r\n              height={height}\r\n              width={width}\r\n              rowHeight={expectedHeight + 45}\r\n              columnWidth={expectedWidth}\r\n              columnCount={columnCount}\r\n              rowCount={rowCount}\r\n              cellRenderer={({ columnIndex, key, rowIndex, style }) => {\r\n                const id = rowIndex * columnCount + columnIndex;\r\n                if (id >= categories.length) return null;\r\n                else\r\n                  return (\r\n                    <div key={key} style={style} onClick={handleOnClicked(id)}>\r\n                      <div\r\n                        className=\"grid-cell\"\r\n                        style={{\r\n                          width: `${expectedWidth}px`,\r\n                          height: `${expectedHeight}px`,\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className=\"cell-content-wrapper\"\r\n                          style={{\r\n                            width: `${expectedWidth - 10}px`,\r\n                            height: `${expectedHeight - 10}px`,\r\n                          }}\r\n                        >\r\n                          {categories[id].previewType ===\r\n                            ContentType.TYPE_PHOTO && (\r\n                            <img\r\n                              className=\"image\"\r\n                              width={expectedWidth - 14}\r\n                              height={expectedHeight - 14}\r\n                              src={toLocalPath(categories[id].previewPath)}\r\n                              alt={getFileName(categories[id].previewPath)}\r\n                            />\r\n                          )}\r\n                          {categories[id].previewType ===\r\n                            ContentType.TYPE_VIDEO && (\r\n                            <video\r\n                              className=\"video\"\r\n                              width={expectedWidth - 14}\r\n                              height={expectedHeight - 14}\r\n                              src={toLocalPath(categories[id].previewPath)}\r\n                            />\r\n                          )}\r\n                          {categories[id].previewType ===\r\n                            ContentType.TYPE_DOCUMENT && (\r\n                            <DocumentItem\r\n                              extension={getFileExtension(\r\n                                categories[id].previewPath\r\n                              )}\r\n                            />\r\n                          )}\r\n                        </div>\r\n\r\n                        <div\r\n                          className=\"cell-category-detail\"\r\n                          style={{\r\n                            width: `${expectedWidth - 10}px`,\r\n                            height: \"45px\",\r\n                          }}\r\n                        >\r\n                          {categoryType === CategoryType.TYPE_CALENDAR && (\r\n                            <CalenderInfo\r\n                              text={`${categories[id].data.year} / ${categories[id].data.month}`}\r\n                            />\r\n                          )}\r\n                          {categoryType === CategoryType.TYPE_DEVICE && (\r\n                            <DeviceInfo\r\n                              text={categories[id].data.device || \"Unknown\"}\r\n                            />\r\n                          )}\r\n                          {categoryType === CategoryType.TYPE_LOCATION && (\r\n                            <LocationInfo\r\n                              text={`${\r\n                                categories[id].data.country || \"Unknown\"\r\n                              } / ${categories[id].data.region || \"Unknown\"}`}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n              }}\r\n            />\r\n          );\r\n        }}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { ImportFileGrid, MainFileGrid, CategoryGrid };\r\n","import { useRef, useEffect } from \"react\";\r\nimport { Icon } from \"leaflet\";\r\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./LocationMap.css\";\r\n\r\n//TODO: update real location & icon for marker\r\nconst LocationMap = ({ categories, onCategorySelected }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  const handleOnClicked = (id) => () => {\r\n    onCategorySelected(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (categories.length > 0) {\r\n      if (mapRef && mapRef.current) {\r\n        const newCenter = [categories[0].lat, categories[0].lon];\r\n        mapRef.current.setView(newCenter, mapRef.current.getZoom());\r\n        console.log(\"setView\", newCenter, mapRef.current.getZoom());\r\n      }\r\n    }\r\n  }, [categories]);\r\n\r\n  return (\r\n    <div className=\"location-map-container\">\r\n      <MapContainer\r\n        center={[51.505, -0.091]}\r\n        zoom={3}\r\n        whenCreated={(mapInstance) => {\r\n          mapRef.current = mapInstance;\r\n        }}\r\n      >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {categories.map((category, index) => {\r\n          return (\r\n            <Marker\r\n              key={category.previewPath + index}\r\n              position={[category.lat, category.lon]}\r\n              icon={\r\n                new Icon({\r\n                  iconUrl: categories[index].previewPath,\r\n                  iconSize: [50, 50],\r\n                })\r\n              }\r\n              eventHandlers={{\r\n                click: handleOnClicked(index),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationMap;\r\n","import { Empty } from \"antd\";\r\n\r\nconst EmptyData = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <Empty />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyData;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Layout, Input, Button } from \"antd\";\r\nimport { UploadOutlined, ArrowLeftOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  getCategoryType,\r\n  getContentType,\r\n  isCatetoryType,\r\n  isFileType,\r\n  isSearchType,\r\n} from \"./utils\";\r\nimport { MainFileGrid, CategoryGrid } from \"./CustomGrid\";\r\nimport LocationMap from \"./LocationMap\";\r\nimport EmptyData from \"./EmptyData\";\r\nimport { AppMode } from \"./constants\";\r\n\r\nconst { Header } = Layout;\r\nconst { Search } = Input;\r\n\r\nconst GET_LIMIT = 100;\r\n\r\nconst AppContent = ({ mode, onImport, setMode }) => {\r\n  const [files, setFiles] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const [inputTextSearch, setInputTextSearch] = useState(\"\");\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const [hasMore, setHasMore] = useState(false);\r\n\r\n  // handle back clicked after view files detail on each category\r\n  const handleBackClicked = () => {\r\n    setFiles([]);\r\n  };\r\n\r\n  // handle text on input search changed to update inputSearchText\r\n  const handleOnSearchTextChanged = (event) => {\r\n    setInputTextSearch(event.target.value);\r\n  };\r\n\r\n  // handle search with search value\r\n  const handleOnSearch = useCallback(\r\n    async (offset) => {\r\n      console.log(\"handleOnSearch from offset:\", offset);\r\n      setHasMore(false);\r\n\r\n      const opt = {\r\n        text: searchValue,\r\n        offset: offset,\r\n        limit: GET_LIMIT,\r\n      };\r\n\r\n      try {\r\n        const result = await window.electron.ipcRenderer.invoke(\r\n          \"db-find-files-by-search\",\r\n          JSON.stringify(opt)\r\n        );\r\n        console.log(\"result of db-find-files-by-search success:\", result);\r\n        setFiles((files) => [...files, ...result]);\r\n        setHasMore(result.length === GET_LIMIT);\r\n      } catch (error) {\r\n        console.log(\"result of db-find-files-by-search error:\", error);\r\n      }\r\n    },\r\n    [searchValue]\r\n  );\r\n\r\n  // when search icon clicked -> update searchValue and change appMode to search\r\n  const onSearch = useCallback(\r\n    async (value) => {\r\n      console.log(\"onSearch\", value);\r\n      setMode(AppMode.MODE_SEARCH);\r\n      setSearchValue(inputTextSearch);\r\n    },\r\n    [setMode, inputTextSearch]\r\n  );\r\n\r\n  // handle when user clickes on each category item\r\n  const handleOnCategorySelected = useCallback(\r\n    async (id) => {\r\n      console.log(\"handleCategorySelectedChanged id:\", id);\r\n      if (categories.length > id) {\r\n        setFiles([]);\r\n        setInputTextSearch(\"\");\r\n        setSearchValue(\"\");\r\n\r\n        const opt = {\r\n          category: categories[id],\r\n          offset: 0,\r\n          limit: GET_LIMIT,\r\n        };\r\n\r\n        try {\r\n          const result = await window.electron.ipcRenderer.invoke(\r\n            \"db-find-files-by-category\",\r\n            JSON.stringify(opt)\r\n          );\r\n          console.log(\"result of db-find-files-by-category success:\", result);\r\n          setFiles(result);\r\n        } catch (error) {\r\n          console.log(\"result of db-find-files-by-category error:\", error);\r\n        }\r\n      }\r\n    },\r\n    [categories]\r\n  );\r\n\r\n  // find files by type (photo, video, document)\r\n  const findFilesByType = useCallback(async (contentType, offset) => {\r\n    setHasMore(false);\r\n\r\n    const opt = {\r\n      type: contentType,\r\n      offset: offset,\r\n      limit: GET_LIMIT,\r\n    };\r\n\r\n    try {\r\n      const result = await window.electron.ipcRenderer.invoke(\r\n        \"db-find-files-by-type\",\r\n        JSON.stringify(opt)\r\n      );\r\n      console.log(\"result of db-find-files-by-type success:\", result);\r\n      setFiles((files) => [...files, ...result]);\r\n      setHasMore(result.length === GET_LIMIT);\r\n    } catch (error) {\r\n      console.log(\"result of db-find-files-by-type error:\", error);\r\n    }\r\n  }, []);\r\n\r\n  // find categories (location, calendar, device)\r\n  const findCategoriesByType = useCallback(async (categoryType, offset) => {\r\n    setHasMore(false);\r\n\r\n    const opt = {\r\n      type: categoryType,\r\n      offset: offset,\r\n      limit: GET_LIMIT,\r\n    };\r\n\r\n    try {\r\n      const result = await window.electron.ipcRenderer.invoke(\r\n        \"db-find-categories-by-type\",\r\n        JSON.stringify(opt)\r\n      );\r\n      console.log(\"result of db-find-categories-by-type success:\", result);\r\n      setCategories((categories) => [...categories, ...result]);\r\n      setHasMore(result.length === GET_LIMIT);\r\n    } catch (error) {\r\n      console.log(\"result of db-find-categories-by-type error:\", error);\r\n    }\r\n  }, []);\r\n\r\n  // handle app mode changes\r\n  useEffect(() => {\r\n    if (isFileType(mode)) {\r\n      setFiles([]);\r\n      setCategories([]);\r\n      setInputTextSearch(\"\");\r\n      setSearchValue(\"\");\r\n      findFilesByType(getContentType(mode), 0);\r\n      return;\r\n    }\r\n\r\n    if (isCatetoryType(mode)) {\r\n      setFiles([]);\r\n      setCategories([]);\r\n      setInputTextSearch(\"\");\r\n      setSearchValue(\"\");\r\n      findCategoriesByType(getCategoryType(mode), 0);\r\n      return;\r\n    }\r\n\r\n    if (isSearchType(mode)) {\r\n      setFiles([]);\r\n      setCategories([]);\r\n      handleOnSearch(0);\r\n      return;\r\n    }\r\n  }, [findFilesByType, findCategoriesByType, handleOnSearch, mode]);\r\n\r\n  // handle load more button is clicked\r\n  const handleLoadMore = useCallback(() => {\r\n    console.log(\"handleLoadMore with mode:\", mode);\r\n    if (isFileType(mode)) {\r\n      setCategories([]);\r\n      setInputTextSearch(\"\");\r\n      setSearchValue(\"\");\r\n      findFilesByType(getContentType(mode), files.length);\r\n      return;\r\n    }\r\n\r\n    if (isCatetoryType(mode)) {\r\n      setFiles([]);\r\n      setInputTextSearch(\"\");\r\n      setSearchValue(\"\");\r\n      findCategoriesByType(getCategoryType(mode), categories.length);\r\n      return;\r\n    }\r\n\r\n    if (isSearchType(mode)) {\r\n      setCategories([]);\r\n      handleOnSearch(files.length);\r\n      return;\r\n    }\r\n  }, [\r\n    findFilesByType,\r\n    findCategoriesByType,\r\n    handleOnSearch,\r\n    mode,\r\n    files.length,\r\n    categories.length,\r\n  ]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header className=\"site-layout-header\">\r\n        <Search\r\n          className=\"header-search\"\r\n          placeholder=\"input search text\"\r\n          allowClear\r\n          onSearch={onSearch}\r\n          value={inputTextSearch}\r\n          onChange={handleOnSearchTextChanged}\r\n        />\r\n        <div className=\"icons-list\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            style={{ opacity: files.length && categories.length }}\r\n            icon={<ArrowLeftOutlined />}\r\n            onClick={handleBackClicked}\r\n          >\r\n            Back\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            icon={<UploadOutlined />}\r\n            onClick={onImport}\r\n          >\r\n            Import\r\n          </Button>\r\n        </div>\r\n      </Header>\r\n      <Layout className=\"site-layout-content\">\r\n        {files.length === 0 && categories.length === 0 && <EmptyData />}\r\n        {files.length > 0 && <MainFileGrid files={files} />}\r\n        {categories.length > 0 &&\r\n          files.length === 0 &&\r\n          mode !== AppMode.MODE_MAP && (\r\n            <CategoryGrid\r\n              categories={categories}\r\n              categoryType={getCategoryType(mode)}\r\n              onCategorySelected={handleOnCategorySelected}\r\n            />\r\n          )}\r\n        {categories.length > 0 &&\r\n          files.length === 0 &&\r\n          mode === AppMode.MODE_MAP && (\r\n            <LocationMap\r\n              categories={categories}\r\n              onCategorySelected={handleOnCategorySelected}\r\n            />\r\n          )}\r\n      </Layout>\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"round\"\r\n        style={{ width: \"200px\", margin: \"8px auto\" }}\r\n        disabled={!hasMore}\r\n        onClick={handleLoadMore}\r\n      >\r\n        Load More\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AppContent;\r\n","import { notification } from \"antd\";\r\n\r\nexport const openNotificationWithIcon = (type, title, description) => {\r\n  notification[type]({\r\n    message: title,\r\n    description: description,\r\n  });\r\n};\r\n\r\nexport const openNotificationSuccess = (title, description) => {\r\n  openNotificationWithIcon(\"success\", title, description);\r\n};\r\n\r\nexport const openNotificationInfo = (title, description) => {\r\n  openNotificationWithIcon(\"info\", title, description);\r\n};\r\n\r\nexport const openNotificationWarning = (title, description) => {\r\n  openNotificationWithIcon(\"warning\", title, description);\r\n};\r\n\r\nexport const openNotificationError = (title, description) => {\r\n  openNotificationWithIcon(\"error\", title, description);\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Form, DatePicker, Layout, Input, Button } from \"antd\";\r\nimport { CountryDropdown, RegionDropdown } from \"react-country-region-selector\";\r\nimport { getFileName, normalizeTextInput } from \"./utils\";\r\nimport { openNotificationSuccess, openNotificationError } from \"./notification\";\r\nimport moment from \"moment\";\r\nimport \"./FormUpdateInfo.css\";\r\n\r\n// require this module for geocoding [internet required]\r\nimport { OpenStreetMapProvider } from \"leaflet-geosearch\";\r\nconst osmProvider = new OpenStreetMapProvider();\r\n\r\nconst DATE_TIME_PICKER_FORMAT = \"YYYY-MM-DD HH:mm:ss\";\r\n\r\nconst FormUpdateInfo = ({ file, contentType, onSuccess }) => {\r\n  const [form] = Form.useForm();\r\n  const [country, setCountry] = useState(\"\");\r\n  const [region, setRegion] = useState(\"\");\r\n\r\n  // update country, region, device, timestamp if the file is changed\r\n  useEffect(() => {\r\n    console.log(\"on file changed\", file);\r\n    if (file && file.path && form) {\r\n      form.setFieldsValue({\r\n        datetime: moment(file.timestamp),\r\n        device: file.device,\r\n        country: file.country,\r\n        region: file.region,\r\n      });\r\n      setCountry(file.country);\r\n    }\r\n  }, [file, form]);\r\n\r\n  const onFinish = async (fieldsValue) => {\r\n    const values = {\r\n      timestamp: new Date(fieldsValue[\"datetime\"]).getTime(),\r\n      device: normalizeTextInput(fieldsValue.device),\r\n      country: normalizeTextInput(fieldsValue.country),\r\n      region: normalizeTextInput(fieldsValue.region),\r\n      type: contentType,\r\n      path: file.path,\r\n      timeCreated: file.timeCreated,\r\n    };\r\n\r\n    // upsert to location category\r\n    if (values.country || values.region) {\r\n      const country = values.country || \"\";\r\n      const region = values.region || \"\";\r\n      const address = country + \" \" + region;\r\n\r\n      try {\r\n        const results = await osmProvider.search({ query: address });\r\n        if (results && results.length > 0) {\r\n          console.log(\"geocoding search result:\", results);\r\n          values.lat = results[0].x;\r\n          values.lon = results[0].y;\r\n        } else {\r\n          console.log(\"geocoding empty result,\", country, region);\r\n        }\r\n      } catch (error) {\r\n        console.log(\"geocoding error,\", country, region);\r\n      }\r\n    }\r\n\r\n    console.log(\"FormUpdateInfo onFinish:\", values);\r\n\r\n    try {\r\n      const result = await window.electron.ipcRenderer.invoke(\r\n        \"db-import-file\",\r\n        JSON.stringify(values)\r\n      );\r\n      console.log(\"result of db-import-file success:\", result);\r\n      openNotificationSuccess(\r\n        \"Import\",\r\n        \"Import file with information successfully\"\r\n      );\r\n      onSuccess(file);\r\n    } catch (error) {\r\n      console.log(\"result of db-import-file error:\", error);\r\n      openNotificationError(\"Import\", \"Import file with information error\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"FormUpdateInfo failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Layout className=\"form-update-info-container\">\r\n      <h3 className=\"info-file-name\">File Name: {getFileName(file.path)}</h3>\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item name=\"datetime\" label=\"Select Date:\">\r\n          <DatePicker showTime format={DATE_TIME_PICKER_FORMAT} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"device\" label=\"Input Device:\">\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"country\" label=\"Select Country:\">\r\n          <CountryDropdown value={country} onChange={setCountry} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"region\" label=\"Select Region:\">\r\n          <RegionDropdown\r\n            country={country}\r\n            value={region}\r\n            onChange={setRegion}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            {file._id ? \"Update\" : \"Import\"}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default FormUpdateInfo;\r\n","import { useState, useCallback, useEffect } from \"react\";\r\nimport { AppMode, ContentType } from \"./constants\";\r\nimport { getContentType } from \"./utils\";\r\nimport { ImportFileGrid } from \"./CustomGrid\";\r\nimport FormUpdateInfo from \"./FormUpdateInfo\";\r\nimport EmptyData from \"./EmptyData\";\r\nimport \"./ImportPanel.css\";\r\n\r\nimport { PageHeader, Layout, Radio, Divider, Button, Row, Col } from \"antd\";\r\nimport { FolderOpenOutlined } from \"@ant-design/icons\";\r\n\r\nconst ImportPanel = ({ mode, onBack }) => {\r\n  const [contentType, setContentType] = useState(getContentType(mode));\r\n  const [files, setFiles] = useState({});\r\n  const [selectedFile, setSelectedFile] = useState({});\r\n\r\n  //handle on mode changed\r\n  useEffect(() => {\r\n    let type = getContentType(mode);\r\n    if (type === \"unknown\") {\r\n      type = AppMode.MODE_PHOTO;\r\n    }\r\n    setContentType(type);\r\n  }, [mode]);\r\n\r\n  //handle selected content type changed\r\n  const onContentTypeChanged = (e) => {\r\n    setContentType(e.target.value);\r\n  };\r\n\r\n  //handle import clicked -> send event to electron to open file dialog\r\n  const onImportClicked = async () => {\r\n    try {\r\n      const result = await window.electron.ipcRenderer.invoke(\r\n        \"open-file-dialog\",\r\n        contentType\r\n      );\r\n\r\n      console.log(\"result of open file dialog success:\", result);\r\n      if (!result.canceled) {\r\n        setFiles({ ...files, [contentType]: result.filePaths });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"result of open file dialog error:\", error);\r\n    }\r\n  };\r\n\r\n  //handle on a file is selected to update info\r\n  const onFileSelected = useCallback(async (path) => {\r\n    console.log(\"onFileSelected\", path);\r\n    try {\r\n      const result = await window.electron.ipcRenderer.invoke(\r\n        \"db-get-file-by-path\",\r\n        path\r\n      );\r\n      console.log(\"result of get file by path success:\", result);\r\n      setSelectedFile(result);\r\n    } catch (error) {\r\n      console.log(\"result of get file by path error:\", error);\r\n      setSelectedFile({ path });\r\n    }\r\n  }, []);\r\n\r\n  //handle on a file is imported successfully\r\n  const onFileImportedSuccess = useCallback(\r\n    async (file) => {\r\n      console.log(\"onFileImportedSuccess\", file, files);\r\n      const currentPaths = files[contentType];\r\n      const newPaths = currentPaths.filter((path) => path !== file.path);\r\n      setFiles({ ...files, [contentType]: newPaths });\r\n    },\r\n    [files, contentType]\r\n  );\r\n\r\n  return (\r\n    <Layout className=\"import-panel-container\">\r\n      <div className=\"panel-container-top\">\r\n        <PageHeader\r\n          className=\"container-top-header\"\r\n          onBack={onBack}\r\n          title=\"Import\"\r\n          subTitle=\"\"\r\n        />\r\n\r\n        <Divider plain>Select a content type to import</Divider>\r\n        <Layout className=\"container-top-content\">\r\n          <Radio.Group\r\n            value={contentType}\r\n            buttonStyle=\"solid\"\r\n            onChange={onContentTypeChanged}\r\n          >\r\n            <Radio.Button value={ContentType.TYPE_PHOTO}>Photo</Radio.Button>\r\n            <Radio.Button value={ContentType.TYPE_VIDEO}>Video</Radio.Button>\r\n            <Radio.Button value={ContentType.TYPE_DOCUMENT}>\r\n              Document\r\n            </Radio.Button>\r\n          </Radio.Group>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            icon={<FolderOpenOutlined />}\r\n            onClick={onImportClicked}\r\n          >\r\n            Open\r\n          </Button>\r\n        </Layout>\r\n\r\n        <Divider plain>Preview</Divider>\r\n      </div>\r\n\r\n      <Layout className=\"panel-container-bottom\">\r\n        {files[contentType] && files[contentType].length > 0 ? (\r\n          <Row>\r\n            <Col className=\"gutter-row\" span={8}>\r\n              <FormUpdateInfo\r\n                file={selectedFile}\r\n                contentType={contentType}\r\n                onSuccess={onFileImportedSuccess}\r\n              />\r\n            </Col>\r\n            <Col className=\"gutter-row\" span={16}>\r\n              <ImportFileGrid\r\n                files={files[contentType]}\r\n                contentType={contentType}\r\n                onFileSelected={onFileSelected}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          <EmptyData />\r\n        )}\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ImportPanel;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Layout } from \"antd\";\r\nimport { AppMode } from \"./constants\";\r\nimport AppSider from \"./AppSider\";\r\nimport AppContent from \"./AppContent\";\r\nimport ImportPanel from \"./ImportPanel\";\r\n\r\nconst App = () => {\r\n  //define app state\r\n  const [mode, setMode] = useState(AppMode.MODE_PHOTO);\r\n  const [importing, setImporting] = useState(false);\r\n\r\n  //handle on import media\r\n  const onImport = () => {\r\n    setImporting(true);\r\n  };\r\n\r\n  //handle on back after opening import pannel\r\n  const onImportPanelBack = () => {\r\n    setImporting(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {importing ? (\r\n        <ImportPanel mode={mode} onBack={onImportPanelBack} />\r\n      ) : (\r\n        <Layout className=\"app\">\r\n          <AppSider mode={mode} setMode={setMode} />\r\n          <Layout className=\"app-site-layout\">\r\n            <AppContent mode={mode} onImport={onImport} setMode={setMode} />\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}